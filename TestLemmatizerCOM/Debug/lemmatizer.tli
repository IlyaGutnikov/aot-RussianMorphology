// Created by Microsoft (R) C/C++ Compiler Version 14.00.23918.0 (9712d8e4).
//
// c:\users\igutnikov\git\aot-russianmorphology\testlemmatizercom\debug\lemmatizer.tli
//
// Wrapper implementations for Win32 type library C:\Rml\Bin\Lemmatizer.tlb
// compiler-generated file created 06/06/16 at 15:51:56 - DO NOT EDIT!

#pragma once

//
// interface IParadigm wrapper method implementations
//

inline unsigned long IParadigm::GetParadigmID ( ) {
    unsigned long _result = 0;
    HRESULT _hr = get_ParadigmID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline unsigned long IParadigm::GetCount ( ) {
    unsigned long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IParadigm::GetAncode ( unsigned long pos ) {
    BSTR _result = 0;
    HRESULT _hr = get_Ancode(pos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IParadigm::GetNorm ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Norm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IParadigm::GetForm ( unsigned long pos ) {
    BSTR _result = 0;
    HRESULT _hr = get_Form(pos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IParadigm::GetTypeAncode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_TypeAncode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IParadigm::GetFounded ( ) {
    long _result = 0;
    HRESULT _hr = get_Founded(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IParadigm::GetSrcAncode ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SrcAncode(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IParadigm::GetSrcNorm ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SrcNorm(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline int IParadigm::GetHomonymWeight ( ) {
    int _result = 0;
    HRESULT _hr = get_HomonymWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IParadigm::GetWordWeight ( ) {
    int _result = 0;
    HRESULT _hr = get_WordWeight(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IParadigm::GetHomonymWeightWithForm ( unsigned long pos ) {
    int _result = 0;
    HRESULT _hr = get_HomonymWeightWithForm(pos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline unsigned char IParadigm::GetAccent ( unsigned long pos ) {
    unsigned char _result = 0;
    HRESULT _hr = get_Accent(pos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline unsigned int IParadigm::GetBaseLength ( ) {
    unsigned int _result = 0;
    HRESULT _hr = get_BaseLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline int IParadigm::GetLemmaPrefixLength ( ) {
    int _result = 0;
    HRESULT _hr = get_LemmaPrefixLength(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IParadigmCollection wrapper method implementations
//

inline long IParadigmCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IParadigmPtr IParadigmCollection::GetItem ( long pos ) {
    struct IParadigm * _result = 0;
    HRESULT _hr = get_Item(pos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IParadigmPtr(_result, false);
}

//
// interface ILemmatizer wrapper method implementations
//

inline IParadigmCollectionPtr ILemmatizer::CreateParadigmCollectionFromNorm ( _bstr_t Norm, long capital, long UsePrediction ) {
    struct IParadigmCollection * _result = 0;
    HRESULT _hr = raw_CreateParadigmCollectionFromNorm(Norm, capital, UsePrediction, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IParadigmCollectionPtr(_result, false);
}

inline IParadigmCollectionPtr ILemmatizer::CreateParadigmCollectionFromForm ( _bstr_t Form, long capital, long UsePrediction ) {
    struct IParadigmCollection * _result = 0;
    HRESULT _hr = raw_CreateParadigmCollectionFromForm(Form, capital, UsePrediction, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IParadigmCollectionPtr(_result, false);
}

inline IParadigmPtr ILemmatizer::CreateParadigmFromID ( long id ) {
    struct IParadigm * _result = 0;
    HRESULT _hr = raw_CreateParadigmFromID(id, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IParadigmPtr(_result, false);
}

inline HRESULT ILemmatizer::LoadDictionariesRegistry ( ) {
    HRESULT _hr = raw_LoadDictionariesRegistry();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long ILemmatizer::GetUseStatistic ( ) {
    long _result = 0;
    HRESULT _hr = get_UseStatistic(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void ILemmatizer::PutUseStatistic ( long pVal ) {
    HRESULT _hr = put_UseStatistic(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT ILemmatizer::LoadStatisticRegistry ( idlSubjectEnum subj ) {
    HRESULT _hr = raw_LoadStatisticRegistry(subj);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline void ILemmatizer::PutMaximalPrediction ( long _arg1 ) {
    HRESULT _hr = put_MaximalPrediction(_arg1);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long ILemmatizer::CheckABC ( _bstr_t Word ) {
    long _result = 0;
    HRESULT _hr = raw_CheckABC(Word, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

//
// interface IPLMLineCollection wrapper method implementations
//

inline _bstr_t IPLMLineCollection::GetItem ( long pos ) {
    BSTR _result = 0;
    HRESULT _hr = get_Item(pos, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IPLMLineCollection::PutItem ( long pos, _bstr_t pVal ) {
    HRESULT _hr = put_Item(pos, pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IPLMLineCollection::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IPLMLineCollection::Remove ( long pos ) {
    HRESULT _hr = raw_Remove(pos);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPLMLineCollection::SaveToFile ( _bstr_t filename ) {
    HRESULT _hr = raw_SaveToFile(filename);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPLMLineCollection::ProcessPlmLines ( IUnknown * piGraphmatFile ) {
    HRESULT _hr = raw_ProcessPlmLines(piGraphmatFile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPLMLineCollection::AttachLemmatizer ( struct ILemmatizer * pVal ) {
    HRESULT _hr = raw_AttachLemmatizer(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPLMLineCollection::Clear ( ) {
    HRESULT _hr = raw_Clear();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPLMLineCollection::ProcessHyphenWords ( IUnknown * piGraphan ) {
    HRESULT _hr = raw_ProcessHyphenWords(piGraphan);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IPLMLineCollection::CopyItems ( IUnknown * piPlmLinesFrom ) {
    HRESULT _hr = raw_CopyItems(piPlmLinesFrom);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
